using Saro.Collections;
using Saro.Tasks;
using System;
using System.Collections.Generic;

namespace Saro
{
    public enum TimerClass
    {
        None = 0,
        OnceWaitTimer = 1,
        OnceTimer = 2,
        RepeatedTimer = 3
    }

    //[ObjectSystem]
    //public sealed class TimerComponentAwakeSystem : AwakeSystem<TimerComponent>
    //{
    //    public override void Awake(TimerComponent self)
    //    {
    //        TimerComponent.Instance = self;
    //    }
    //}

    [FObjectSystem]
    public sealed class TimerComponentUpdateSystem : UpdateSystem<TimerComponent>
    {
        public override void Update(TimerComponent self)
        {
            self.Update();
        }
    }

    public class TimerComponent : FEntity
    {
        // 单例，全部挂在 Game.Scene 上，使用Game.Resolve<T>接口获取
        //public static TimerComponent Instance { get; internal set; }

        private readonly TSortedMultiMap<long, long> m_TimeIdMap = new TSortedMultiMap<long, long>();
        private readonly Queue<long> m_TimeOutTime = new Queue<long>();
        private readonly Queue<long> m_TimeOutTimerId = new Queue<long>();

        private long m_MinTime;

        public void Update()
        {
            if (m_TimeIdMap.Count == 0)
            {
                return;
            }

            long timeNow = FGame.TimeInfo.ServerNow();

            if (timeNow < m_MinTime)
            {
                return;
            }

            foreach (var item in m_TimeIdMap)
            {
                long k = item.Key;
                if (k > timeNow)
                {
                    m_MinTime = k;
                    break;
                }

                m_TimeOutTime.Enqueue(k);
            }

            while (m_TimeOutTime.Count > 0)
            {
                long time = m_TimeOutTime.Dequeue();
                foreach (var timeId in m_TimeIdMap[time])
                {
                    m_TimeOutTimerId.Enqueue(timeId);
                }

                m_TimeIdMap.Remove(time);
            }

            while (m_TimeOutTimerId.Count > 0)
            {
                long timerId = m_TimeOutTimerId.Dequeue();

                TimerAction timerAction = GetChild<TimerAction>(timerId);
                if (timerAction == null) continue;

                Run(timerAction);
            }
        }

        private void Run(TimerAction timerAction)
        {
            switch (timerAction.timerClass)
            {
                case TimerClass.OnceWaitTimer:
                    {
                        FTask<bool> tcs = timerAction.callback as FTask<bool>;
                        Remove(timerAction.ID);
                        tcs.SetResult(true);
                    }
                    break;
                case TimerClass.OnceTimer:
                    {
                        Action action = timerAction.callback as Action;
                        Remove(timerAction.ID);
                        action?.Invoke();
                    }
                    break;
                case TimerClass.RepeatedTimer:
                    {
                        Action action = timerAction.callback as Action;
                        long tillTime = FGame.TimeInfo.ServerNow() + timerAction.time;
                        AddTimer(tillTime, timerAction);
                        action?.Invoke();
                    }
                    break;
                default:
                    break;
            }
        }

        private void AddTimer(long tillTime, TimerAction timerAction)
        {
            m_TimeIdMap.Add(tillTime, timerAction.ID);
            if (tillTime < m_MinTime)
            {
                m_MinTime = tillTime;
            }
        }

        public async FTask<bool> WaitTillAsync(long tillTime, FCancellationToken cancellationToken)
        {
            if (FGame.TimeInfo.ServerNow() >= tillTime)
            {
                return true;
            }

            FTask<bool> tcs = FTask<bool>.Create(true);
            TimerAction timerAction = FEntity.Create<TimerAction, TimerClass, long, object>(this, TimerClass.OnceWaitTimer, 0, tcs, true);
            AddTimer(tillTime, timerAction);
            long timerId = timerAction.ID;

            void CancelAction()
            {
                if (Remove(timerId))
                {
                    tcs.SetResult(false);
                }
            }

            bool ret;
            try
            {
                cancellationToken?.Add(CancelAction);
                ret = await tcs;
            }
            finally
            {
                cancellationToken?.Remove(CancelAction);
            }
            return ret;
        }

        public async FTask<bool> WaitFrameAsync(FCancellationToken cancellationToken = null)
        {
            return await WaitAsync(1, cancellationToken);
        }

        public async FTask<bool> WaitAsync(long time, FCancellationToken cancellationToken = null)
        {
            if (time == 0) return true;

            long tillTime = FGame.TimeInfo.ServerNow() + time;

            FTask<bool> tcs = FTask<bool>.Create(true);

            TimerAction timer = FEntity.Create<TimerAction, TimerClass, long, object>(this, TimerClass.OnceWaitTimer, 0, tcs, true);
            AddTimer(tillTime, timer);
            long timerId = timer.ID;

            void CancelAction()
            {
                if (Remove(timerId))
                {
                    tcs.SetResult(false);
                }
            }

            bool ret;
            try
            {
                cancellationToken?.Add(CancelAction);
                ret = await tcs;
            }
            finally
            {
                cancellationToken?.Remove(CancelAction);
            }
            return ret;
        }

        public long NewFrameTimer(Action action)
        {
            return NewRepeatedTimerInternal(1, action);
        }

        private long NewRepeatedTimerInternal(long time, Action action)
        {
            long tillTime = FGame.TimeInfo.ServerNow() + time;
            var timer = FEntity.Create<TimerAction, TimerClass, long, object>(this, TimerClass.RepeatedTimer, time, action, true);
            AddTimer(tillTime, timer);
            return timer.ID;
        }

        public long NewRepeatedTimer(long time, Action action)
        {
            return NewRepeatedTimerInternal(time, action);
        }

        public void Remove(ref long id)
        {
            if (Remove(id))
            {
                id = 0;
            }
            else
            {
                throw new Exception($"TimerComponent Remove Error: {id}");
            }
        }

        public bool Remove(long id)
        {
            if (id == 0) return false;

            var timer = GetChild<TimerAction>(id);
            if (timer == null) return false;

            timer.Dispose();
            return true;
        }

        public long NewOnceTimer(long tillTime, Action action)
        {
            if (tillTime < FGame.TimeInfo.ServerNow())
            {
                Log.ERROR("TimerComponent", $"new once time too small: {tillTime}");
            }

            var timer = FEntity.Create<TimerAction, TimerClass, long, object>(this, TimerClass.OnceTimer, 0, action, true);
            AddTimer(tillTime, timer);
            return timer.ID;
        }
    }
}